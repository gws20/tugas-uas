{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(googleVis)\nlibrary(DT)\nlibrary(shinythemes)\nlibrary(rsconnect)\n\nfunction(input, output, session) {\n  v <- reactiveValues(data = NULL)\n  ### Argument names:\n  ArgNames <- reactive({\n    Names <- names(formals(input$readFunction)[-1])\n    Names <- Names[Names!=\"...\"]\n    return(Names)\n  })\n  # Argument selector:\n  output$ArgSelect <- renderUI({\n    if (length(ArgNames())==0) return(NULL)\n    selectInput(\"arg\",\"Argument:\",ArgNames())\n  })\n  ## Arg text field:\n  output$ArgText <- renderUI({\n    fun__arg <- paste0(input$readFunction,\"__\",input$arg)\n    if (is.null(input$arg)) return(NULL)\n    Defaults <- formals(input$readFunction)\n    if (is.null(input[[fun__arg]]))\n    {\n      textInput(fun__arg, label = \"Masukan value dari argumen terpilih:\", value = deparse(Defaults[[input$arg]]))\n    } else {\n      textInput(fun__arg, label = \"Masukan value dari argumen terpilih:\", value = input[[fun__arg]])\n    }\n  })\n  \n  ### Data import:\n  Dataset <- reactive({\n    if (is.null(input$file)) {\n      #jika belum ada yg di input\n      return(data.frame())\n    }\n    args <- grep(paste0(\"^\",input$readFunction,\"__\"), names(input), value = TRUE)\n    argList <- list()\n    for (i in seq_along(args))\n    {\n      argList[[i]] <- eval(parse(text=input[[args[i]]]))\n    }\n    names(argList) <- gsub(paste0(\"^\",input$readFunction,\"__\"),\"\",args)\n    argList <- argList[names(argList) %in% ArgNames()]\n    Dataset <- as.data.frame(do.call(input$readFunction,c(list(input$file$datapath),argList)))\n    return(Dataset)\n  })\n  \n  # Select variables:\n  output$varselect <- renderUI({\n    if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)\n    # Variable selection:    \n    selectInput(\"vars\", \"Variables yang dipakai:\",\n                names(Dataset()), names(Dataset()), multiple =TRUE)\n  })\n  \n  # button simpan\n  observeEvent(input$simpan, {\n    ifelse ((is.null(input$file)), \n       (v$suksesInput<-paste(\"file belum dipilih\")),\n       ifelse ((length(input$name)<1 | is.null(input$name) | input$name==\"\" ),\n          (v$suksesInput<-\"nama data belum diset\"),\n          {\n            v$suksesInput <- paste0(\"Data '\",input$name,\"' sudah berhasil tersimpan\")\n            assign(input$name, data.frame(Dataset()[,input$vars,drop=FALSE]))\n            v$dataSelect<- assign(input$name, data.frame(Dataset()[,input$vars,drop=FALSE]))\n            }\n        )\n    )\n  })  \n  ####datanya####\n  pilihData<-reactive(Dataset()[,input$vars,drop=FALSE])\n  \n  # Show table:\n  output$table <- renderTable({\n    if (is.null(input$vars) || length(input$vars)==0) return(NULL)\n    return(Dataset()[,input$vars,drop=FALSE])\n  })\n  output$tabel_advance <- DT::renderDataTable(DT::datatable(\n    cbind(State = rownames(pilihData()), pilihData()),\n    options = list(pageLength = 10), rownames = FALSE)\n  )\n  # notif status\n  output$txtInputSukses <- renderText({\n    paste(v$suksesInput)\n  })\n\n  output$pilihData<- renderUI({\n    # Variable selection:    \n    selectInput(\"pilih\", \"Variables yang dipakai:\",\n                names(pilihData()), names(pilihData()))\n  })\n  \n  ####simple input####\n  ## masih crash....\n  output$contents_simple_input <- renderTable({\n    \n    inFile <- input$file_simple\n    \n    if (is.null(inFile))\n      return(NULL)\n    read.csv(inFile$datapath, header=input$header_simple, sep=input$sep_simple, \n                          quote=input$quote_simple)\n    \n    \n  })\n  ####input dari library####\n  ## masih dalam pengembangan\n  #datalib<-(get(input$dataLib))\n  #output$table_datalib <- renderTable({\n  #  return(datalib())\n  #})\n  \n  ####cluster####\n  \n  # Combine the selected variables into a new data frame\n  selectedData <- reactive({\n    pilihData()[, c(input$xcol, input$ycol)]\n  })  \n  \n  clusters <- reactive({\n    kmeans(selectedData(), input$clusters)\n  })\n  \n  output$var<- renderUI({\n    # Variable selection: \n    if(is.null(input$file$datapath)){return()}\n    else list (\n    selectInput(\"ycol\", \"variabel y:\",\n                names(pilihData()), names(pilihData())[1]),\n    selectInput(\"xcol\", \"variabel x:\",\n                names(pilihData()), names(pilihData())[2])\n    )\n  })\n  \n  output$plot1 <- renderPlot({\n    palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n              \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n    \n    par(mar = c(5.1, 4.1, 0, 1))\n    plot(selectedData(),\n         col = clusters()$cluster,\n         pch = 20, cex = 3)\n    points(clusters()$centers, pch = 4, cex = 4, lwd = 4)\n  })\n\n  ####regresi####\n  \n  rls<-function(x,y){\n    b1<-(length(x)*sum(x*y) - sum(x)*sum(y))/(length(x)*sum(x^2)-sum(x)^2);\n    b0<-mean(y)-b1*mean(x);\n    cat(\"Fitting model regresi sederhananya adalah : \\n\");\n    if (b1==0) {cat(\"bukan fungsi regresi\")}\n    else {\n      if (b1>0) {cat(\"E(yh) = \", b0,\" + \",b1,\"X\")}\n      else {cat(\"E(yh) = \", b0,\" - \",abs(b1),\"X\")};\n    }\n  }\n  \n  Ynew<-function(Xnew,x,y){\n    b1<-(length(x)*sum(x*y) - sum(x)*sum(y))/(length(x)*sum(x^2)-sum(x)^2);\n    b0<-mean(y)-b1*mean(x);\n    return(b0+Xnew*b1);\n  }\n  \n  Xnew<-function(Ynew,x,y){\n    b1<-(length(x)*sum(x*y) - sum(x)*sum(y))/(length(x)*sum(x^2)-sum(x)^2);\n    b0<-mean(y)-b1*mean(x);\n    return((Ynew-b0)/b1);\n  }\n  \n  output$sideReg<- renderUI({\n    # Variable selection:  \n    if(is.null(input$file$datapath)){return()}\n    else list (\n      selectInput(\"ycolReg\", \"variabel y:\", names(pilihData()), names(pilihData())[1]),\n      selectInput(\"xcolReg\", \"variabel x:\", names(pilihData()), names(pilihData())[2]))\n  })\n  \n  \n  #summary\n  output$summaryRegresi<-renderPrint({\n    y<-pilihData()[,input$ycolReg]\n    x<-pilihData()[,input$xcolReg]\n    data<-pilihData()\n    summary(lm(y~x,data))\n  })\n  output$Fitting<-renderPrint ({\n    rls(pilihData()[,input$xcolReg],pilihData()[,input$ycolReg])\n  })\n  \n  output$plotRegresi<-renderPlot({\n    y<-pilihData()[,input$ycolReg]\n    x<-pilihData()[,input$xcolReg]\n    data<-pilihData()\n    fit<-lm(y~x,data)\n    par(mar = c(4, 4, 1, 1))\n    plot(y~x, data, pch = 19, col = 'gray')\n    abline(fit, col = 'red', lwd = 2)\n  })\n  \n  #prediksi\n  observe({\n    c_var <- input$var_prediksi\n    if (c_var == \"x\") {c_in<-\"y\"}\n    else {c_in<-\"x\"}\n    updateNumericInput(session, \"nilai_prediksi\", \n                       label = paste(\"Nilai variabel \", c_in,\" :\"))\n  })\n  \n  output$lblHasil_prediksi<-renderText(\n    if(input$var_prediksi==\"x\") {\"Hasil prediksi nilai x :\"}\n    else {\"Hasil prediksi nilai y :\"}\n  )\n  \n  output$hasil_prediksi<-renderPrint({\n    y<-pilihData()[,input$ycolReg]\n    x<-pilihData()[,input$xcolReg]\n    if(input$var_prediksi==\"x\") {\n      Xnew(input$nilai_prediksi,x,y)\n    }\n    else {Ynew(input$nilai_prediksi,x,y)}\n  })\n  \n  \n  ####anova####\n  anov1<-function(y,x){\n    anov<-unlist(summary(aov(y~x)))\n    atribut<-c(\"SoV\",\"Derajat bebas\",\"Sum of Square\",\"Mean Suare\",\"F-hitung\",\"P-Value\")\n    Sumber<-c(\"Treatment\",\"Error\",\"Total\")\n    df<-c(anov[1],anov[2],anov[1]+anov[2])\n    ss<-c(anov[3],anov[4],anov[3]+anov[4])\n    ms<-c(anov[5],anov[6],NA)\n    Fval<-c(anov[7],anov[8],NA)\n    Pval<-c(anov[9],anov[10],NA)\n    tabel<-data.frame(Sumber,df,ss,ms,Fval,Pval)\n    colnames(tabel)<-atribut\n    return(tabel)\n  }\n  anov2<-function(y,A,B){\n    options(digits = 0)\n    anov<-unlist(summary(aov(y~A+B)))\n    atribut<-c(\"SoV\",\"Derajat bebas\",\"Sum of Square\",\"Mean Suare\",\"F-hitung\",\"P-Value\")\n    Sumber<-c(\"Faktor A\",\"Faktor B\",\"Error\",\"Total\")\n    df<-c(anov[1],anov[2],anov[3],anov[1]+anov[2]+anov[3])\n    ss<-c(anov[4],anov[5],anov[6],anov[5]+anov[4]+anov[6])\n    ms<-c(anov[7],anov[8],anov[9],NA)\n    Fval<-c(anov[10],anov[11],anov[12],NA)\n    Pval<-c(anov[13],anov[14],anov[15],NA)\n    tabel<-data.frame(Sumber,df,ss,ms,Fval,Pval)\n    colnames(tabel)<-atribut\n    return(tabel)\n  }\n  \n  output$sideAov<- renderUI({\n    # Variable selection:  \n    if(is.null(input$file$datapath)){return()}\n    else list (\n      selectInput(\"yAov\", \"variabel dependen:\", names(pilihData()), names(pilihData())[1]),\n      if (input$pilih_tipe_anova==\"satu arah\") {\n        selectInput(\"xAov\", \"variabel independen:\", names(pilihData()), names(pilihData())[2])}\n      else {list(\n        selectInput(\"Faktor_A\", \"Faktor A:\", names(pilihData()), names(pilihData())[2]),\n        \n        selectInput(\"Faktor_B\", \"Faktor B:\", names(pilihData()), names(pilihData())[3]))\n      })\n    \n  })\n  output$summary_asumsi_normal1<-renderPrint({\n    data<-pilihData()\n    y<-data[,input$yAov]\n    if (input$pilih_tipe_anova==\"satu arah\"){\n      x<-data[,input$xAov]\n      by(data = y, INDICES = x,FUN = shapiro.test)\n    }\n  })\n  output$summary_asumsi_normal21<-renderPrint({\n    data<-pilihData()\n    y<-data[,input$yAov]\n    if (input$pilih_tipe_anova==\"dua arah\"){\n      Faktor_A<-data[,input$Faktor_A]\n      by(data = y, INDICES = Faktor_A,FUN = shapiro.test)\n    }\n  })\n  output$summary_asumsi_normal22<-renderPrint({\n    data<-pilihData()\n    y<-data[,input$yAov]\n    if (input$pilih_tipe_anova==\"dua arah\"){\n      Faktor_B<-data[,input$Faktor_B]\n      by(data = y, INDICES = Faktor_B,FUN = shapiro.test)\n    }\n  })\n  output$summary_asumsi_homogen<-renderPrint({\n    data<-pilihData()\n    y<-data[,input$yAov]\n    if (input$pilih_tipe_anova==\"satu arah\"){\n      x<-data[,input$xAov]\n      bartlett.test(y~x,data = data)\n      \n    }\n    else {\n      Faktor_A<-data[,input$Faktor_A]\n      Faktor_B<-data[,input$Faktor_B]\n      bartlett.test(y~c(Faktor_A+Faktor_B),data = data)\n    }\n  })\n  \n  normal_anova<-reactive({\n    data<-pilihData()\n    y<-data[,input$yAov]\n    if (input$pilih_tipe_anova==\"satu arah\"){\n      x<-data[,input$xAov]\n      normal<-by(data = y, INDICES = x,FUN = shapiro.test)\n    }\n    else {\n      Faktor_A<-data[,input$Faktor_A]\n      Faktor_B<-data[,input$Faktor_B]\n      normal<-c(by(data = y, INDICES = Faktor_A,FUN = shapiro.test),\n                by(data = y, INDICES = Faktor_B,FUN = shapiro.test))\n    }\n    \n    n<-length(normal)\n    for(i in seq(1,n,4)){\n      if(unlist(normal)[i+1]>input$alpha_anova) return(\"gagal tolak H0\")\n    }\n    return(\"tolak H0\")\n  })\n  homogen_anova<-reactive({\n    data<-pilihData()\n    y<-data[,input$yAov]\n    if (input$pilih_tipe_anova==\"satu arah\"){\n      x<-data[,input$xAov]\n      homo<- bartlett.test(y~x,data = data)\n      \n    }\n    else {\n      Faktor_A<-data[,input$Faktor_A]\n      Faktor_B<-data[,input$Faktor_B]\n      homo<-bartlett.test(y~c(Faktor_A+Faktor_B),data = data)\n    }\n    if(unlist(homo)[3]>input$alpha_anova) return(\"gagal tolak H0\")\n    return(\"tolak H0\")\n    \n  })\n  output$asumsi_anova<-renderUI({\n    list(\n      if(normal_anova()==\"gagal tolak H0\"){\n        p(\"Asumsi normalitas terpenuhi\",style=\"color:green\")}\n      else {\n        p(\"Asumsi normalitas tidak terpenuhi\",style=\"color:red\")\n      },\n      if(homogen_anova()==\"gagal tolak H0\"){\n        p(\"Asumsi Homogenitas varian terpenuhi\",style=\"color:green\")}\n      else {\n        p(\"Asumsi Homogenitas varian tidak terpenuhi\",style=\"color:red\")\n      }\n    )\n  })\n  #output$tek<-renderText(normal_anova())\n  anov<-reactive({\n    data<-pilihData()\n    y<-data[,input$yAov]\n    if (input$pilih_tipe_anova==\"satu arah\"){\n      x<-data[,input$xAov]\n      aov<-aov(y~x,data)\n      #anov1(y,x)\n    }\n    else {\n      Faktor_A<-data[,input$Faktor_A]\n      Faktor_B<-data[,input$Faktor_B]\n      aov<-aov(y~Faktor_A+Faktor_B,data)\n      #anov2(y,Faktor_A,Faktor_B)\n    }\n  })\n  #output$tabel_anova1<-renderTable(unlist(summary(anov)))\n  \n  output$tabel_anova_satu<-renderTable({\n      data<-pilihData()\n      y<-data[,input$yAov]\n      x<-data[,input$xAov]\n      anov1(y,x)\n  })\n  output$tabel_anova<-renderPrint({\n    \n    if ((normal_anova()!=\"tolak H0\")&(homogen_anova()!=\"tolak H0\")) {summary(anov())}\n    else {return(cat(\"Tabel tidak dapat ditampilkan karena asumsi tidak terpenuhi\"))}\n  })\n  \n  output$analisa_anova<-renderUI({\n    if ((normal_anova()!=\"tolak H0\")&(homogen_anova()!=\"tolak H0\")) {\n      if (input$pilih_tipe_anova==\"satu arah\"){\n        list(\n          tags$p(\"H0: rata-rata kelompok faktor adalah sama\"),\n          tags$p(\"H1: setidaknya terdapat sepasang rata-rata yang berbeda\"),\n          tags$hr(),\n          tags$p(\"\\nAlpha  : \", input$alpha_anova),\n          tags$p(\"\\nP-value: \", unlist(summary(anov()))[9]),\n          if(unlist(summary(anov()))[9]>input$alpha_anova){list(\n            tags$p(\"Kesimpulan  : Gagal tolak H0\"),\n            tags$p(\"Intepretasi : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata-ratanya sama\")\n          )}\n          else {list(\n            tags$p(\"Kesimpulan  : Tolak H0\"),\n            tags$p(\"Intepretasi : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata-ratanya berbeda\")\n          )}\n        )}\n      else {list(\n        tags$p(\"H0(A): rata-rata kelompok faktor A adalah sama\"),\n        tags$p(\"H1(A): setidaknya terdapat sepasang rata-rata yang berbeda\"),\n        tags$p(\"H0(B): rata-rata kelompok faktor B adalah sama\"),\n        tags$p(\"H1(B): setidaknya terdapat sepasang rata-rata yang berbeda\"),\n        tags$hr(),\n        tags$p(\"\\nAlpha  : \", input$alpha_anova),\n        tags$p(\"\\nP-value A: \", unlist(summary(anov()))[13]),\n        tags$p(\"\\nP-value B: \", unlist(summary(anov()))[14]),\n        if(unlist(summary(anov()))[13]>input$alpha_anova){\n          if(unlist(summary(anov()))[14]>input$alpha_anova){list(\n            tags$p(\"Kesimpulan  1 : Gagal tolak H0(A)\"),\n            tags$p(\"Kesimpulan  2 : Gagal tolak H0(B)\"),\n            tags$p(\"Intepretasi 1 : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata kelompok Faktor A sama\"),\n            tags$p(\"Intepretasi 1 : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata kelompok Faktor B sama\")\n          )}\n          else {list(\n            tags$p(\"Kesimpulan  1 : Gagal tolak H0(A)\"),\n            tags$p(\"Kesimpulan  2 : Tolak H0(B)\"),\n            tags$p(\"Intepretasi 1 : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata kelompok Faktor A sama\"),\n            tags$p(\"Intepretasi 1 : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata kelompok Faktor B berbeda\")\n          )}\n        }\n        else {\n          if(unlist(summary(anov()))[14]>input$alpha_anova){list(\n            tags$p(\"Kesimpulan  1 : Tolak H0(A)\"),\n            tags$p(\"Kesimpulan  2 : Gagal tolak H0(B)\"),\n            tags$p(\"Intepretasi 1 : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata kelompok Faktor A berbeda\"),\n            tags$p(\"Intepretasi 1 : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata kelompok Faktor B sama\")\n          )}\n          else {list(\n            tags$p(\"Kesimpulan  1 : Tolak H0(A)\"),\n            tags$p(\"Kesimpulan  2 : Tolak H0(B)\"),\n            tags$p(\"Intepretasi 1 : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata kelompok Faktor A berbeda\"),\n            tags$p(\"Intepretasi 1 : Dengan taraf signifikansi \",input$alpha_anova,\" cukup bukti bahwa rata kelompok Faktor B berbeda\")\n          )}\n        }\n      )}\n    }\n    else {\n      tags$p(\"Analisis tidak dapat ditampilkan, karena terdapat pelanggaran asumsi\",syle=\"color:red\")\n    }\n  })\n\n  #### summary####\n  output$summary_statistik<-renderPrint(\n    summary(pilihData())\n  )\n  \n  ####korelasi####\n  \n  output$corr <- renderGvis({\n    d <- pilihData()[,sapply(pilihData(),is.integer)|sapply(pilihData(),is.numeric)] \n    cor <- as.data.frame(round(cor(d), 2))\n    cor <- cbind(Variables = rownames(cor), cor)\n    gvisTable(cor) \n  })\n  \n  #### residuals ####\n  output$side_residual<-renderUI({\n    # Variable selection:  \n    if(is.null(input$file$datapath)){return()}\n    else list (\n      selectInput(\"y_res\", \"variabel y:\", names(pilihData()), names(pilihData())[1]),\n      selectInput(\"x_res\", \"variabel x:\", names(pilihData()), names(pilihData())[2]))\n  })\n  output$residuals_hist <- renderPlot({\n    x<-pilihData()[,input$x_res]\n    y<-pilihData()[,input$y_res]\n    model<-lm(y~x,data = pilihData())\n    hist(model$residuals, main = paste(input$y_res, ' ~ ', input$x_res), xlab = 'Residuals') \n  })\n  \n  output$residuals_scatter <- renderPlot({\n    x<-pilihData()[,input$x_res]\n    y<-pilihData()[,input$y_res]\n    model<-lm(y~x,data = pilihData())\n    plot(model$residuals ~ x, xlab = x, ylab = 'Residuals')\n    abline(h = 0, lty = 3) \n  })\n  \n  output$residuals_qqline <- renderPlot({\n    x<-pilihData()[,input$x_res]\n    y<-pilihData()[,input$y_res]\n    model<-lm(y~x,data = pilihData())\n    qqnorm(model$residuals)\n    qqline(model$residuals) \n  })\n  \n  #### Visual ####\n  #Histogram\n  # Select variables:\n  output$var_histogram <- renderUI({\n    if (identical(Dataset(), '') || identical(Dataset(),data.frame())) return(NULL)\n    # Variable selection:    \n    selectInput(\"var_histogram\", \"Variables yang dipakai:\",\n                names(pilihData()), names(pilihData())[1])\n  })\n  output$plot_histogram <- renderPlot({\n    x    <- pilihData()[, input$var_histogram]  # Old Faithful Geyser data\n    bins <- seq(min(x), max(x), length.out = input$bins_histogram + 1)\n    \n    # draw the histogram with the specified number of bins\n    hist(x, breaks = bins, col = 'darkgray', border = 'white', xlab = input$var_histogram)\n  })\n  \n  \n  ####SCatter####\n  output$side_scatter<-renderUI({\n    # Variable selection:  \n    if(is.null(input$file$datapath)){return()}\n    else list (\n      selectInput(\"y_scatter\", \"variabel y:\", names(pilihData()), names(pilihData())[1]),\n      selectInput(\"x_scatter\", \"variabel x:\", names(pilihData()), names(pilihData())[2]))\n  })\n  output$scatter<-renderPlot({\n    x<-pilihData()[,input$x_scatter]\n    y<-pilihData()[,input$y_scatter]\n    plot(x,y,\n         xlab = input$x_scatter, ylab = input$y_scatter,  main = paste(\"Scatter Plot \",input$name), pch = 16, \n         col = \"black\", cex = 1) \n  })\n####about####\n  ####abaut me####\n  output$aboutme<-renderUI({list(\n    tags$p(\"Nama  \\t: Ginanjar Wahyu Subekti\"),\n    tags$p(\"NIM   \\t: 15.8637\"),\n    tags$p(\"Kelas \\t: 2KS3\")\n  )})\n  ####aplikasi####\n  output$aplikasi<-renderUI({list(\n    tags$ul(\"INPUT\"),\n    tags$li(\"Fungsi masukkan = untuk menentukan file bertipe apa yang akan dipakai\"),\n    tags$li(\"Argumen = memilih argumen dari fungsi masukan, untuk mengubah pengaturan fungsi, jika dibiarkan, akan  menghasilkan argumen default.\"),\n    tags$li(\"Masukan value dari argumen terpilih = nilai dari argumen, contoh yang perlu diubah, argumen header perlu diubah menjadi T atau TRUE\"),\n    tags$li(\"Upload data-file = upload data sesuai fungsi yg dipilih\"),\n    tags$li(\"disimpan dengan nama = data file yg diupload akan disimpan dengan nama yg diinputkan\"),\n    tags$hr(),\n    \n    tags$ul(\"Regresi\"),\n    tags$li(\"Data yang cocok untuk regresi ini adalah 'data_regresi.txt'\"),\n    tags$li(\"berisi tentang analisis regresi yang mencangkup fitting model, summary, plot dan menentukan prediksi y dan prediksi x\"),\n    tags$hr(),\n    tags$ul(\"ANOVA\"),\n    tags$li(\"data yang cocok chick.txt dan data_anova.csv\"),\n    tags$li(\"variabel dependen merupakan variabel dependen yang berupa skala rasio\"),\n    tags$li(\"variabel independen/Faktor A/Faktor B merupakan variabel yang mempengaruhi dan berupa skala nominal atau interval\"),\n    tags$li(\"Alpha maksimal 1 dan minimal 0\"),\n    tags$li(\"apabila data tidak memenuhi asumsi normalitas dan homogenitas, maka tidak dapat ditampilkan, untuk mengeceknya dapat dilihat di tab asumsi\"),\n    tags$hr(),\n    tags$ul(\"Summary\"),\n    tags$li(\"akan menampilkan statistik deskriptif dari tiap tiap variabel\"),\n    tags$hr(),\n    tags$ul(\"korelasi\"),\n    tags$li(\"ini membutuhkan pakcage googleVis, dan yg ditampilkan adalah tabel korelasi dari seluruh variabel\"),\n    tags$hr(),\n    tags$ul(\"Residual\"),\n    tags$li(\"akan menampilkan analisis residual, diantaranya: histogram, Scatter plot dan QQPlot\"),\n    tags$hr(),\n    tags$ul(\"Visual\"),\n    tags$li(\"menampilkan tampilan visual berupa histogram, cluster dan Scatter plot\"),\n    tags$hr(),\n    tags$ul(\"ABOUT\"),\n    tags$li(\"berisu dari data diri author dan dokumentasi aplikasi\")\n  )})\n}",
    "created" : 1500635914757.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4110921666",
    "id" : "42493292",
    "lastKnownWriteTime" : 1500647795,
    "last_content_update" : 1500647795323,
    "path" : "D:/tmp/R shiny/latihan - Copy/15.8637/App/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}